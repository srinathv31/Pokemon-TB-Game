{"version":3,"sources":["assets/PokemonImages/Charizard.png","assets/PokemonImages/logo.png","components/PokemonView.tsx","utilities/data.ts","components/Controls.tsx","components/BattleLog.tsx","components/BattleControls.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","pokemon","pokemonHealth","name","type","src","require","default","alt","width","attack","defense","getRandomPokemon","items","Math","floor","random","length","Controls","setPokemon","oppSetPokemon","healthSetter","oppHealthSetter","gameStateSetter","deck","onClick","health","BattleLogger","pokemon1","pokemon2","gameState","pokemon2Health","BattleControls","gameSetter","App","useState","DECK","activeCard","setActiveCard","oppActiveCard","oppSetActiveCard","playerHealth","setPlayerHealth","oppHealth","setOppHealth","visible","setGameState","intro","setStartGame","className","logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.203bfaa2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Charizard.3a975ddb.png\";","export default __webpack_public_path__ + \"static/media/logo.6e223bd2.png\";","import { Pokemon } from \"../interfaces/pokemon\";\n\nexport function CardViewer({ pokemon, pokemonHealth }:\n    { pokemon: Pokemon, pokemonHealth: number }): JSX.Element {\n    \n        // const IMG = require(pokemon.image)\n\n        // function getHealth() {\n        //     pokemonHealth = pokemon.health;\n        //     return pokemonHealth;\n        // }\n    \n    return <div>\n        <div>{pokemon.name} {pokemon.type}</div>\n        <div><img src={require(\"/Users/srinath/Desktop/Pokemon-TB-Game/pokemon-game/src/assets/PokemonImages/Charizard.png\").default} alt=\"pokemon\" width=\"250\"/></div>\n        <div>Attack: {pokemon.attack}</div>\n        <div>Defense: {pokemon.defense}</div>\n        <div>Health: {pokemonHealth}</div>\n    </div>\n}\n","// Return random card from Deck\nexport function getRandomPokemon<T>(items: T[]): T {\n    return items[Math.floor(Math.random()*items.length)];\n}\n","import { Pokemon } from \"../interfaces/pokemon\";\nimport { getRandomPokemon } from \"../utilities/data\";\n\nexport function Controls({ setPokemon, oppSetPokemon, healthSetter, oppHealthSetter, gameStateSetter, deck, pokemon }:\n    {\n        setPokemon: (c: Pokemon) => void, oppSetPokemon: (c: Pokemon) => void,\n        healthSetter: (h: number) => void, oppHealthSetter: (h: number) => void, \n        gameStateSetter: (g: number) => void, deck: Pokemon[], pokemon: Pokemon\n    }): JSX.Element {\n\n    function setRandomPokemon() {\n        setPokemon(getRandomPokemon(deck));\n        oppSetPokemon(getRandomPokemon(deck));\n        healthSetter(pokemon.health);\n        oppHealthSetter(pokemon.health);\n        gameStateSetter(1);\n    }\n\n    return <div>\n        <button onClick={setRandomPokemon}>Draw Card</button>\n    </div>\n}\n    ","import { Pokemon } from \"../interfaces/pokemon\";\n\n\nexport function BattleLogger({ pokemon1, pokemon2, pokemon2Health, gameState}:\n    { pokemon1: Pokemon, pokemon2: Pokemon, pokemon2Health: number, \n        gameState: number}): JSX.Element {\n        \n        if (gameState === 1) {\n            return(\n                <><div>Player has Drawn: {pokemon1.name}</div><br /><div>CPU had Drawn: {pokemon2.name}</div></>\n            )\n        }\n        if (gameState === 2) {\n            return(\n                <div>{pokemon1.name} attacked {pokemon2.name} for {pokemon1.attack} HP!</div>\n            )\n        }\n    \n    return <div>\n        {/* <div>{pokemon2.name} Health: {pokemon2Health}</div> */}\n    </div>\n}\n","import { Pokemon } from \"../interfaces/pokemon\";\nimport DECK from '../assets/pokemons.json';\nimport { useEffect, useState } from \"react\";\nimport { CardViewer } from \"./PokemonView\";\n\nexport function BattleControls({ pokemon1, pokemon2, pokemon2Health, gameSetter }:\n    { pokemon1: Pokemon, pokemon2: Pokemon,\n      pokemon2Health: (h: number) => void, gameSetter: (g: number) => void }): JSX.Element {\n\n        function playerAttack() {\n            if (pokemon2.health > pokemon1.attack){\n                pokemon2.health = pokemon2.health - pokemon1.attack;\n            }\n            else {\n                pokemon2.health = 0;\n            }\n            pokemon2Health(pokemon2.health);\n            gameSetter(2);\n            return pokemon2Health;\n        }\n\n    return <div>\n        {/* <button onClick={startGame}>Start Game</button> */}\n        <button onClick={playerAttack}>Attack</button>\n    </div>\n}\n    ","import React, { useState } from 'react';\nimport logo from './assets/PokemonImages/logo.png';\nimport './App.css';\nimport DECK from './assets/pokemons.json';\nimport { Pokemon } from './interfaces/pokemon';\nimport { CardViewer } from './components/PokemonView';\nimport { Controls } from './components/Controls';\nimport { BattleLogger } from './components/BattleLog';\nimport { BattleControls } from './components/BattleControls';\nimport { render } from '@testing-library/react';\n\nfunction App(this: any): JSX.Element {\n  const [activeCard, setActiveCard] = useState<Pokemon>(DECK[0] as Pokemon);\n  const [oppActiveCard, oppSetActiveCard] = useState<Pokemon>(DECK[0] as Pokemon);\n  const [playerHealth, setPlayerHealth] = useState<number>(DECK[0].health as number);\n  const [oppHealth, setOppHealth] = useState<number>(DECK[0].health as number);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [gameState, setGameState] = useState<number>(0);\n  const [startGame, setStartGame] = useState({ visible: false, intro: false });\n  const onClickStartGame = () => {\n    setStartGame({\n      visible: true,\n      intro: true,\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"cell cell-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      {/* Player Hand */}\n      <aside className=\"cell cell-left\">\n        { !visible && <Controls \n        setPokemon= {setActiveCard}\n        oppSetPokemon = {oppSetActiveCard}\n        healthSetter = {setPlayerHealth}\n        oppHealthSetter = {setOppHealth}\n        deck = {DECK} \n        pokemon = {activeCard}\n        gameStateSetter = {setGameState}></Controls>}\n\n        <CardViewer pokemon={activeCard}\n        pokemonHealth = {playerHealth}></CardViewer>\n      </aside>\n\n      <main className=\"cell cell-main\">\n      { !visible && <button onClick={onClickStartGame}>Start Game</button>}\n        { visible && <BattleControls\n        pokemon1={activeCard}\n        pokemon2={oppActiveCard}\n        pokemon2Health={setOppHealth}\n        gameSetter = {setGameState}></BattleControls> }\n        {/* { !visible && <button onClick={() => setVisible(!visible) }>Start Game</button>}\n        { visible && <BattleControls\n        pokemon1={activeCard}\n        pokemon2={oppActiveCard}\n        pokemon2Health={setOppHealth}\n        gameSetter = {setGameState}></BattleControls> } */}\n      </main>\n\n      {/* CPU Hand */}\n      <aside className=\"cell cell-right\">\n        <CardViewer \n        pokemon={oppActiveCard}\n        pokemonHealth = {oppHealth}></CardViewer>\n      </aside>\n      <footer className=\"class cell-footer\">\n        <BattleLogger \n        pokemon1={activeCard}\n        pokemon2={oppActiveCard}\n        pokemon2Health={oppHealth}\n        gameState = {gameState}></BattleLogger>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}