{"version":3,"sources":["assets/PokemonImages/logo.png","components/HelpPage.tsx","assets/PokemonImages/Charizard.png","assets/PokemonImages/Squirtle.png","assets/PokemonImages/Bulbasaur.png","components/PokemonView.tsx","utilities/data.ts","components/Controls.tsx","components/BattleLog.tsx","components/BattleControls.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HelpView","className","CardViewer","pokemon","pokemonHealth","name","type","src","id","Charizard","Squirtle","Bulbasaur","getPokemonImg","alt","width","attack","defense","getRandomPokemon","items","Math","floor","random","length","getMissPercent","min","getMissValue","percent","Controls","setPokemon","oppSetPokemon","healthSetter","oppHealthSetter","gameStateSetter","deck","onClick","health","BattleLogger","pokemon1","pokemon2","gameState","criticalChance","BattleControls","pokemon1Health","pokemon2Health","gameSetter","criticalSetter","cpuAttack","willDefend","checkWinner","cpuDefendPrompt","setTimeout","cpuDefend","cpuDefenseHandler","playerAttack","criticalCPUAttack","criticalPlayerAttack","checkMiss","playerDefend","isMiss","App","useState","DECK","activeCard","setActiveCard","oppActiveCard","oppSetActiveCard","playerHealth","setPlayerHealth","oppHealth","setOppHealth","visible","setVisible","helpVisible","setHelpVisible","setGameState","criticalState","setCriticalState","logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f315712.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6e223bd2.png\";","import '../help.css';\n\n// eslint-disable-next-line\nexport function HelpView({}:\n    { }): JSX.Element {\n    \n    return <div>\n        <body className=\"change-logs\">\n        <div className=\"list\">\n            <div>\n                <div className=\"underline-change-logs\"><h1 className=\"h1-change-logs\">How To Play</h1></div>\n                <ul>\n                    <li>First, you have to select \"Draw Card\" to draw a random Pokemon from the deck. By default, both you and the CPU\n                        are given Charizard.\n                    </li>\n                    <li>Next, click on \"Start Game\" to begin the battle.\n                    </li>\n                    <li>You are given two options: \"Attack\" and \"Defend\"\n                    </li>\n                    <li>\"Attack\" simply attacks the opponent's Pokemon based on how much damage your Pokemon has.\n                        However, this is a turn based game so the CPU Pokemon will also attack you back.\n                    </li>\n                    <li>\"Defend\" makes your Pokemon try to dodge the attack. The probablity of a succesful dodge depends on\n                        the Pokemon's \"defense\" attribute. The higher the defense, the higher the probablity for the Pokemon\n                        to dodge the attack.\n                    </li>\n                    <li>If your Pokemon succesfully dodges the CPU's attack, your Pokemon will then counter-attack with \n                        a critical attack on the CPU Pokemon with damage equal to your Pokemon's attack attribute + 10.\n                    </li>\n                    <li>If your Pokemon misses the dodge, then your Pokemon takes damage equal to the CPU's Pokemon's attack\n                        attribute minus your Pokemon's defense attribute. So the higher your defense attribute, the less damage\n                        you will take on a missed dodge.\n                    </li>\n                    <li>Again, since this is a turn-based game, the CPU can also choose to defend your attacks at certain turns.\n                        If the CPU is succesful, it will also counter-attack you.\n                    </li>\n                    <li>Finally, a winner is declared when a Pokemon reaches 0 Health.</li>\n                    <li>Note: some strategy could be to gamble with the \"Defend\" ability to give you a leg up in the fight.\n                        Or trying to time the \"Defend\" before the CPU can pull off a counter-attack on you!\n                    </li>\n                </ul><br />\n            </div>\n        </div>\n    </body>\n    </div>\n}\n\n","export default __webpack_public_path__ + \"static/media/Charizard.3a975ddb.png\";","export default __webpack_public_path__ + \"static/media/Squirtle.c6de7a61.png\";","export default __webpack_public_path__ + \"static/media/Bulbasaur.414b59bb.png\";","import { Pokemon } from \"../interfaces/pokemon\";\nimport Charizard from \"../assets/PokemonImages/Charizard.png\"\nimport Squirtle from \"../assets/PokemonImages/Squirtle.png\"\nimport Bulbasaur from \"../assets/PokemonImages/Bulbasaur.png\"\n\n\n\nexport function CardViewer({ pokemon, pokemonHealth }:\n    { pokemon: Pokemon, pokemonHealth: number }): JSX.Element {\n    \n        function getPokemonImg() {\n            let id = pokemon.name;\n            switch(id) {\n                case 'Charizard':\n                    id = Charizard;\n                    return id;\n                case 'Squirtle':\n                    id = Squirtle;\n                    return id;\n                case 'Bulbasaur':\n                    id = Bulbasaur;\n                    return id;\n            }\n        }\n\n\n    return <div>\n        <div><span className=\"card-name\">{pokemon.name}</span> <span className=\"card-type\">Type:{pokemon.type}</span></div>\n        <div><img src={getPokemonImg()} alt=\"pokemon\" width=\"250\"/></div>\n        <div className=\"strokeAtt\">Attack: {pokemon.attack}</div>\n        <div className=\"strokeAtt\">Defense: {pokemon.defense}</div>\n        <div className=\"strokeAtt\">Health: {pokemonHealth}</div>\n    </div>\n}\n","// Return random card from Deck\nexport function getRandomPokemon<T>(items: T[]): T {\n    return items[Math.floor(Math.random()*items.length)];\n}\n\nexport function getMissPercent(min: number) {\n    return Math.floor(Math.random() * (100 - min + 1)) + min;\n}\n\nexport function getMissValue(percent: number, min: number) {\n    const value = Math.floor(Math.random() * (100 - min + 1)) + min;\n    if (percent > value) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n","import { Pokemon } from \"../interfaces/pokemon\";\nimport { getRandomPokemon } from \"../utilities/data\";\n\nexport function Controls({ setPokemon, oppSetPokemon, healthSetter, oppHealthSetter, gameStateSetter, deck, pokemon }:\n    {\n        setPokemon: (c: Pokemon) => void, oppSetPokemon: (c: Pokemon) => void,\n        healthSetter: (h: number) => void, oppHealthSetter: (h: number) => void, \n        gameStateSetter: (g: number) => void, deck: Pokemon[], pokemon: Pokemon,\n    }): JSX.Element {\n\n    function setRandomPokemon() {\n        setPokemon(getRandomPokemon(deck));\n        oppSetPokemon(getRandomPokemon(deck));\n        healthSetter(pokemon.health);\n        oppHealthSetter(pokemon.health);\n        gameStateSetter(2);\n    }\n\n    return <div>\n        <button onClick={setRandomPokemon}>Draw Card</button>\n    </div>\n}\n    ","import { Pokemon } from \"../interfaces/pokemon\";\nimport '../Dots.css';\n\nexport function BattleLogger({ pokemon1, pokemon2, gameState, criticalChance}:\n    { pokemon1: Pokemon, pokemon2: Pokemon, pokemon2Health: number, \n        gameState: number, criticalChance: number }): JSX.Element {\n        \n        if (gameState === 1) {\n            return (\n                <div>Game has Started!</div>\n            )\n        }\n        if (gameState === 2) {\n            return(\n                <><div>Player has Drawn: {pokemon1.name}</div><br /><div>CPU had Drawn: {pokemon2.name}</div></>\n            )\n        }\n        if (gameState === 3) {\n            return(\n                <div className=\"loading\">{pokemon1.name} attacked {pokemon2.name} for {pokemon1.attack} HP!</div>\n            )\n        }\n        if (gameState === 4) {\n            return(\n                <><div>{pokemon1.name} attacked {pokemon2.name} for {pokemon1.attack} HP!</div>\n                <div>{pokemon2.name} attacked {pokemon1.name} for {pokemon2.attack} HP!</div></>\n            )\n        }\n        if (gameState === 5) {\n            return(\n                <><div>{pokemon2.name} attacked {pokemon1.name} for {pokemon2.attack} HP!</div>\n                <div>CPU Wins!</div>\n                <br /><div>Refresh the page to play again!</div></>\n            )\n        }\n        if (gameState === 6) {\n            return(\n                <><div>{pokemon1.name} attacked {pokemon2.name} for {pokemon1.attack} HP!</div>\n                <div>Player Wins!</div>\n                <br /><div>Refresh the page to play again!</div></>\n            )\n        }\n        if (gameState === 7) {\n            return(\n                <div className=\"loading\">{pokemon1.name} is defending</div>\n            )\n        }\n        if (gameState === 8) {\n            return(\n                <><div>{pokemon1.name} with a {criticalChance}% chance to dodge and counter attack.</div><br />\n                <div>{pokemon1.name} could not dogde attack!</div>\n                <div>{pokemon2.name} attacked {pokemon1.name} for {(pokemon2.attack - pokemon1.defense)} HP!</div></>\n            )\n        }\n        if (gameState === 9) {\n            return(\n                <div>Player has decided to flee! CPU wins!</div>\n            )\n        }\n        if (gameState === 10) {\n            return(\n                <><div className=\"loading\">{pokemon1.name} with a {criticalChance}% chance to dodge and counter attack</div><br />\n                <div>{pokemon1.name} dodged {pokemon2.name}'s attack!</div></>\n            )\n        }\n        if (gameState === 11) {\n            return(\n                <><div>{pokemon1.name} with a {criticalChance}% chance to counter attack.</div><br />\n                <div>{pokemon1.name} counter-attacked with critical hit of {(pokemon1.attack + 10)} damage!</div>\n                <div>{pokemon2.name} lost {(pokemon1.attack + 10)} HP!</div></>\n            )\n        }\n        if (gameState === 12) {\n            return(\n                <div className=\"loading\">CPU's {pokemon2.name} is defending</div>\n            )\n        }\n        if (gameState === 13) {\n            return(\n                <><div className=\"loading\">{pokemon2.name} with a {criticalChance}% chance to dodge and counter attack</div><br />\n                <div>{pokemon2.name} dodged {pokemon1.name}'s attack!</div></>\n            )\n        }\n        if (gameState === 14) {\n            return(\n                <><div>CPU's {pokemon2.name} with a {criticalChance}% chance to counter attack.</div><br />\n                <div>{pokemon2.name} counter-attacked with critical hit of {(pokemon2.attack + 10)} damage!</div>\n                <div>{pokemon1.name} lost {(pokemon2.attack + 10)} HP!</div></>\n            )\n        }\n        if (gameState === 15) {\n            return(\n                <><div>{pokemon2.name} with a {criticalChance}% chance to dodge and counter attack.</div><br />\n                <div>{pokemon2.name} could not dogde attack!</div>\n                <div>{pokemon1.name} attacked {pokemon2.name} for {(pokemon1.attack - pokemon2.defense)} HP!</div></>\n            )\n        }\n    return <div>\n        {/* <div>{pokemon2.name} Health: {pokemon2Health}</div> */}\n    </div>\n}\n","import { Pokemon } from \"../interfaces/pokemon\";\nimport { getMissPercent } from \"../utilities/data\";\nimport { getMissValue } from \"../utilities/data\";\n\n\nexport function BattleControls({ pokemon1, pokemon2, pokemon1Health, pokemon2Health, gameSetter, criticalSetter }:\n    { pokemon1: Pokemon, pokemon2: Pokemon,\n      pokemon1Health: (h: number) => void, pokemon2Health: (h: number) => void,\n      gameSetter: (g: number) => void, criticalSetter: (c: number) => void }): JSX.Element {\n\n        function cpuAttack(willDefend: boolean) {\n            if (willDefend){\n                cpuDefenseHandler();\n            }\n\n            else if (!willDefend){\n                playerAttack();\n                if (pokemon1.health > pokemon2.attack){\n                    pokemon1.health = pokemon1.health - pokemon2.attack;\n                }\n                else {\n                    pokemon1.health = 0;\n                }\n                pokemon1Health(pokemon1.health);\n                gameSetter(4);\n                return pokemon1Health;\n            }\n        }\n\n        function cpuAttackChoice() {\n            const percent = getMissPercent(1);\n            const willDefend = getMissValue(percent, 1);\n            cpuAttack(willDefend);\n        }\n\n        function playerAttack() {\n            if (pokemon2.health > pokemon1.attack){\n                pokemon2.health = pokemon2.health - pokemon1.attack;\n            }\n            else {\n                pokemon2.health = 0;\n            }\n            pokemon2Health(pokemon2.health);\n            gameSetter(3);\n            return pokemon2Health;\n        }\n\n        function criticalCPUAttack() {\n            if (pokemon1.health > (pokemon2.attack + 10)){\n                pokemon1.health = pokemon1.health - (pokemon2.attack + 10);\n            }\n            else {\n                pokemon1.health = 0;\n            }\n            pokemon1Health(pokemon1.health);\n            gameSetter(14);\n            return pokemon1Health;\n        }\n\n        function criticalPlayerAttack() {\n            if (pokemon2.health > (pokemon1.attack + 10)){\n                pokemon2.health = pokemon2.health - (pokemon1.attack + 10);\n            }\n            else {\n                pokemon2.health = 0;\n            }\n            pokemon2Health(pokemon2.health);\n            gameSetter(11);\n            return pokemon2Health;\n        }\n\n        function checkWinner() {\n            if (pokemon1.health === 0) {\n                gameSetter(5);\n                return true;\n            }\n            if (pokemon2.health === 0) {\n                gameSetter(6);\n                return true;\n            }\n            return false;\n        }\n\n        function attackHandler() {\n            if(checkWinner()){\n                return 0;\n            }\n            cpuAttackChoice();\n            if(checkWinner()){\n                return 0;\n            }\n            checkWinner();\n        }\n\n        function playerDefendPrompt() {\n            gameSetter(7);\n        }\n\n        function checkMiss() {\n            const percent = getMissPercent(pokemon1.defense);\n            criticalSetter(percent);\n            return getMissValue(percent, pokemon1.defense);\n        }\n\n        function playerDefend() {\n            const isMiss = checkMiss();\n            if (isMiss) {\n                gameSetter(10);\n                setTimeout(criticalPlayerAttack, 3000);\n            }\n            else if (!isMiss){\n                if ((pokemon1.health + pokemon1.defense) > pokemon2.attack){\n                    pokemon1.health = (pokemon1.health + pokemon1.defense) - pokemon2.attack;\n                }\n                else {\n                    pokemon1.health = 0;\n                }\n                pokemon1Health(pokemon1.health);\n                gameSetter(8);\n            }\n            return pokemon1Health;\n        }\n\n        function cpuDefendPrompt() {\n            gameSetter(12);\n        }\n\n        function cpuDefend() {\n            const isMiss = checkMiss();\n            if (isMiss) {\n                gameSetter(13);\n                setTimeout(criticalCPUAttack, 3000);\n            }\n            else if (!isMiss){\n                if ((pokemon2.health + pokemon2.defense) > pokemon1.attack){\n                    pokemon2.health = (pokemon2.health + pokemon2.defense) - pokemon1.attack;\n                }\n                else {\n                    pokemon2.health = 0;\n                }\n                pokemon2Health(pokemon2.health);\n                gameSetter(15);\n            }\n            return pokemon2Health;\n        }\n\n        function defenseHandler() {\n            if(checkWinner()){\n                return 0;\n            }\n            playerDefendPrompt();\n            if(checkWinner()){\n                return 0;\n            }\n            setTimeout(playerDefend, 2000);\n            if(checkWinner()){\n                return 0;\n            }\n            checkWinner();\n        }\n\n        function cpuDefenseHandler() {\n            if(checkWinner()){\n                return 0;\n            }\n            cpuDefendPrompt();\n            if(checkWinner()){\n                return 0;\n            }\n            setTimeout(cpuDefend, 2000);\n            if(checkWinner()){\n                return 0;\n            }\n            checkWinner();\n        }\n\n        // function resetGame() {\n        //     gameSetter(1);\n        //     pokemon1Health(100);\n        //     pokemon2Health(100);\n        //     checkWinner();\n        // }\n\n        // function playAgain() {\n        //    <button onClick={resetGame}>Play Again?</button>\n        // }\n\n        // if (!checkWinner()) {\n        //     <><button onClick={attackHandler}>Attack</button><br /><br />\n        //     <button onClick={defenseHandler}>Defend</button><br /><br /></>    \n        // }\n        \n\n    return <div>\n        <button className=\"damage-button\" onClick={attackHandler}>Attack</button><br /><br />\n        <button className=\"defend-button\" onClick={defenseHandler}>Defend</button><br /><br />\n    </div>\n}\n    ","import React, { useState } from 'react';\nimport logo from './assets/PokemonImages/logo.png';\nimport { HelpView } from './components/HelpPage';\nimport './App.css';\nimport DECK from './assets/pokemons.json';\nimport { Pokemon } from './interfaces/pokemon';\nimport { CardViewer } from './components/PokemonView';\nimport { Controls } from './components/Controls';\nimport { BattleLogger } from './components/BattleLog';\nimport { BattleControls } from './components/BattleControls';\n\nfunction App(this: any): JSX.Element {\n  const [activeCard, setActiveCard] = useState<Pokemon>(DECK[0] as Pokemon);\n  const [oppActiveCard, oppSetActiveCard] = useState<Pokemon>(DECK[0] as Pokemon);\n  const [playerHealth, setPlayerHealth] = useState<number>(DECK[0].health as number);\n  const [oppHealth, setOppHealth] = useState<number>(DECK[0].health as number);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [helpVisible, setHelpVisible] = useState<boolean>(false);\n  const [gameState, setGameState] = useState<number>(0);\n  const [criticalState, setCriticalState] = useState<number>(0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"cell cell-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" /><br />\n        { !helpVisible && <button onClick={() => setHelpVisible(!helpVisible) }>How to Play</button>}\n        { helpVisible && <button onClick={() => setHelpVisible(!helpVisible) }>Close</button>}\n        { helpVisible && <HelpView></HelpView>}\n      </header>\n      {/* Player Hand */}\n      <aside className=\"cell cell-left\">\n        <CardViewer pokemon={activeCard}\n        pokemonHealth = {playerHealth}></CardViewer>\n      </aside>\n\n      <main className=\"cell cell-main\">\n      { !visible && <Controls \n        setPokemon= {setActiveCard}\n        oppSetPokemon = {oppSetActiveCard}\n        healthSetter = {setPlayerHealth}\n        oppHealthSetter = {setOppHealth}\n        deck = {DECK} \n        pokemon = {activeCard}\n        gameStateSetter = {setGameState}></Controls>}\n        { !visible && <button onClick={() => setVisible(!visible) }>Start Game</button>}\n        { visible && <><div className=\"stroke\">Battle Controls</div><br /></>}\n        { visible && <BattleControls\n        pokemon1={activeCard}\n        pokemon2={oppActiveCard}\n        pokemon1Health={setPlayerHealth}\n        pokemon2Health={setOppHealth}\n        gameSetter = {setGameState}\n        criticalSetter={setCriticalState}></BattleControls> }\n      </main>\n\n      {/* CPU Hand */}\n      <aside className=\"cell cell-right\">\n        <CardViewer \n        pokemon={oppActiveCard}\n        pokemonHealth = {oppHealth}></CardViewer>\n      </aside>\n      <footer className=\"class cell-footer\">\n        <BattleLogger \n        pokemon1={activeCard}\n        pokemon2={oppActiveCard}\n        pokemon2Health={oppHealth}\n        gameState = {gameState}\n        criticalChance = {criticalState}></BattleLogger>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}