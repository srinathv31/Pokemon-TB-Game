{"version":3,"sources":["assets/PokemonImages/logo.png","components/PokemonView.tsx","utilities/data.ts","components/Controls.tsx","components/BattleLog.tsx","components/BattleControls.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","pokemon","name","type","src","image","alt","width","attack","defense","health","getRandomPokemon","items","Math","floor","random","length","Controls","setPokemon","oppSetPokemon","deck","onClick","BattleLogger","pokemon1","pokemon2","BattleControls","console","log","App","useState","DECK","activeCard","setActiveCard","oppActiveCard","oppSetActiveCard","className","logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4nBAAe,MAA0B,iC,sBCElC,SAASA,EAAT,GACiC,IADXC,EACU,EADVA,QAEzB,OAAO,gCACH,gCAAMA,EAAQC,KAAd,IAAqBD,EAAQE,QAC7B,8BAAK,qBAAKC,IAAKH,EAAQI,MAAOC,IAAI,UAAUC,MAAM,UAClD,8BAAMN,EAAQO,SACd,8BAAMP,EAAQQ,UACd,8BAAMR,EAAQS,YCRf,SAASC,EAAoBC,GAChC,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAASH,EAAMI,SCCzC,SAASC,EAAT,GAIc,IAJMC,EAIP,EAJOA,WAAYC,EAInB,EAJmBA,cAAeC,EAIlC,EAJkCA,KAWlD,OAAO,8BACH,wBAAQC,QANZ,WACIH,EAAWP,EAAiBS,IAC5BD,EAAcR,EAAiBS,KAI/B,yBCZD,SAASE,EAAT,GACoD,IAD5BC,EAC2B,EAD3BA,SAAUC,EACiB,EADjBA,SAErC,OAAO,gCACH,qDAAwBD,EAASrB,QAAW,uBAC5C,kDAAqBsB,EAAStB,QAC9B,gCAAMsB,EAAStB,KAAf,YAA8BsB,EAASd,aCHxC,SAASe,EAAT,GACoD,IAD1BF,EACyB,EADzBA,SAAUC,EACe,EADfA,SAenC,OAAO,8BACP,wBAAQH,QAbR,WASI,OARIG,EAASd,OAASa,EAASf,OAC3BgB,EAASd,OAASc,EAASd,OAASa,EAASf,OAG7CgB,EAASd,OAAS,EAEtBgB,QAAQC,IAAIH,EAASd,QACrBgB,QAAQC,IAAI,UACLH,EAASd,QAIpB,sBCwBOkB,MAnCf,WACE,MAAoCC,mBAAkBC,EAAK,IAA3D,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0CH,mBAAkBC,EAAK,IAAjE,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAwCL,mBAAiBC,EAAK,GAAGpB,QAAjE,mBAEA,OAFA,UAGE,sBAAKyB,UAAU,MAAf,UACE,wBAAQA,UAAU,mBAAlB,SACE,qBAAK/B,IAAKgC,EAAMD,UAAU,WAAW7B,IAAI,WAG3C,wBAAO6B,UAAU,iBAAjB,UACE,cAAClB,EAAD,CACAC,WAAac,EACbb,cAAiBe,EACjBd,KAAQU,IACR,cAAC9B,EAAD,CAAYC,QAAS8B,OAEvB,sBAAMI,UAAU,iBAAhB,SACE,cAACV,EAAD,CACAF,SAAUQ,EACVP,SAAUS,MAEZ,uBAAOE,UAAU,kBAAjB,SACE,cAACnC,EAAD,CAAYC,QAASgC,MAEvB,wBAAQE,UAAU,oBAAlB,SACE,cAACb,EAAD,CACAC,SAAUQ,EACVP,SAAUS,UCzBHI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5fa05e19.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6e223bd2.png\";","import { Pokemon } from \"../interfaces/pokemon\";\n\nexport function CardViewer({ pokemon }:\n    { pokemon: Pokemon }): JSX.Element {\n    return <div>\n        <div>{pokemon.name} {pokemon.type}</div>\n        <div><img src={pokemon.image} alt=\"pokemon\" width=\"250\"/></div>\n        <div>{pokemon.attack}</div>\n        <div>{pokemon.defense}</div>\n        <div>{pokemon.health}</div>\n    </div>\n}\n","// Return random card from Deck\nexport function getRandomPokemon<T>(items: T[]): T {\n    return items[Math.floor(Math.random()*items.length)];\n}\n","import { Pokemon } from \"../interfaces/pokemon\";\nimport { getRandomPokemon } from \"../utilities/data\";\n\nexport function Controls({ setPokemon, oppSetPokemon, deck }:\n    {\n        setPokemon: (c: Pokemon) => void, oppSetPokemon: (c: Pokemon) => void,\n        deck: Pokemon[]\n    }): JSX.Element {\n\n    function setRandomPokemon() {\n        setPokemon(getRandomPokemon(deck));\n        oppSetPokemon(getRandomPokemon(deck));\n    }\n\n    return <div>\n        <button onClick={setRandomPokemon}>Draw Card</button>\n    </div>\n}\n    ","import { Pokemon } from \"../interfaces/pokemon\";\n\n\nexport function BattleLogger({ pokemon1, pokemon2}:\n    { pokemon1: Pokemon, pokemon2: Pokemon}): JSX.Element {\n    return <div>\n        <div>Player has Drawn: {pokemon1.name}</div><br/>\n        <div>CPU had Drawn: {pokemon2.name}</div>\n        <div>{pokemon2.name} Health: {pokemon2.health}</div>\n    </div>\n}\n","import { Pokemon } from \"../interfaces/pokemon\";\nimport DECK from '../assets/pokemons.json';\nimport { useEffect, useState } from \"react\";\nimport { CardViewer } from \"./PokemonView\";\n\nexport function BattleControls({ pokemon1, pokemon2 }:\n    { pokemon1: Pokemon, pokemon2: Pokemon}): JSX.Element {\n\n        function playerAttack() {\n            if (pokemon2.health > pokemon1.attack){\n                pokemon2.health = pokemon2.health - pokemon1.attack;\n            }\n            else {\n                pokemon2.health = 0;\n            }\n            console.log(pokemon2.health);\n            console.log(\"attack\");\n            return pokemon2.health;\n        }\n\n        return <div>\n        <button onClick={playerAttack}>Attack</button>\n    </div>\n}\n    ","import React, { useState } from 'react';\nimport logo from './assets/PokemonImages/logo.png';\nimport './App.css';\nimport DECK from './assets/pokemons.json';\nimport { Pokemon } from './interfaces/pokemon';\nimport { CardViewer } from './components/PokemonView';\nimport { Controls } from './components/Controls';\nimport { BattleLogger } from './components/BattleLog';\nimport { BattleControls } from './components/BattleControls';\n\nfunction App(): JSX.Element {\n  const [activeCard, setActiveCard] = useState<Pokemon>(DECK[0] as Pokemon);\n  const [oppActiveCard, oppSetActiveCard] = useState<Pokemon>(DECK[0] as Pokemon);\n  const [playerHealth, setPlayerHealth] = useState<number>(DECK[0].health as number);\n\n  return (\n    <div className=\"App\">\n      <header className=\"cell cell-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      {/* Player Hand */}\n      <aside className=\"cell cell-left\">\n        <Controls \n        setPokemon= {setActiveCard}\n        oppSetPokemon = {oppSetActiveCard}\n        deck = {DECK}></Controls>\n        <CardViewer pokemon={activeCard}></CardViewer>\n      </aside>\n      <main className=\"cell cell-main\">\n        <BattleControls\n        pokemon1={activeCard}\n        pokemon2={oppActiveCard}></BattleControls>\n      </main>\n      <aside className=\"cell cell-right\">\n        <CardViewer pokemon={oppActiveCard}></CardViewer>\n      </aside>\n      <footer className=\"class cell-footer\">\n        <BattleLogger \n        pokemon1={activeCard}\n        pokemon2={oppActiveCard}></BattleLogger>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}