{"version":3,"sources":["assets/PokemonImages/Charizard.png","assets/PokemonImages/logo.png","components/PokemonView.tsx","utilities/data.ts","components/Controls.tsx","components/BattleLog.tsx","components/BattleControls.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","pokemon","pokemonHealth","name","type","src","require","default","alt","width","attack","defense","getRandomPokemon","items","Math","floor","random","length","Controls","setPokemon","oppSetPokemon","healthSetter","oppHealthSetter","gameStateSetter","deck","onClick","health","BattleLogger","pokemon1","pokemon2","gameState","criticalChance","className","BattleControls","pokemon1Health","pokemon2Health","gameSetter","criticalSetter","cpuAttack","criticalPlayerAttack","checkWinner","checkMiss","min","percent","getMissValue","playerDefend","isMiss","setTimeout","App","useState","DECK","activeCard","setActiveCard","oppActiveCard","oppSetActiveCard","playerHealth","setPlayerHealth","oppHealth","setOppHealth","visible","setVisible","setGameState","criticalState","setCriticalState","logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84d85015.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Charizard.3a975ddb.png\";","export default __webpack_public_path__ + \"static/media/logo.6e223bd2.png\";","import { Pokemon } from \"../interfaces/pokemon\";\n\nexport function CardViewer({ pokemon, pokemonHealth }:\n    { pokemon: Pokemon, pokemonHealth: number }): JSX.Element {\n    \n    return <div>\n        <div>{pokemon.name} {pokemon.type}</div>\n        <div><img src={require(\"/Users/srinath/Desktop/Pokemon-TB-Game/pokemon-game/src/assets/PokemonImages/Charizard.png\").default} alt=\"pokemon\" width=\"250\"/></div>\n        <div>Attack: {pokemon.attack}</div>\n        <div>Defense: {pokemon.defense}</div>\n        <div>Health: {pokemonHealth}</div>\n    </div>\n}\n","// Return random card from Deck\nexport function getRandomPokemon<T>(items: T[]): T {\n    return items[Math.floor(Math.random()*items.length)];\n}\n\nexport function getMissPercent(min: number) {\n    return Math.floor(Math.random() * (100 - min + 1)) + min;\n}\n\nexport function getMissValue(percent: number, min: number) {\n    const value = Math.floor(Math.random() * (100 - min + 1)) + min;\n    if (percent > value) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n","import { Pokemon } from \"../interfaces/pokemon\";\nimport { getRandomPokemon } from \"../utilities/data\";\n\nexport function Controls({ setPokemon, oppSetPokemon, healthSetter, oppHealthSetter, gameStateSetter, deck, pokemon }:\n    {\n        setPokemon: (c: Pokemon) => void, oppSetPokemon: (c: Pokemon) => void,\n        healthSetter: (h: number) => void, oppHealthSetter: (h: number) => void, \n        gameStateSetter: (g: number) => void, deck: Pokemon[], pokemon: Pokemon,\n    }): JSX.Element {\n\n    function setRandomPokemon() {\n        setPokemon(getRandomPokemon(deck));\n        oppSetPokemon(getRandomPokemon(deck));\n        healthSetter(pokemon.health);\n        oppHealthSetter(pokemon.health);\n        gameStateSetter(2);\n    }\n\n    return <div>\n        <button onClick={setRandomPokemon}>Draw Card</button>\n    </div>\n}\n    ","import { Pokemon } from \"../interfaces/pokemon\";\nimport '../Dots.css';\n\nexport function BattleLogger({ pokemon1, pokemon2, gameState, criticalChance}:\n    { pokemon1: Pokemon, pokemon2: Pokemon, pokemon2Health: number, \n        gameState: number, criticalChance: number }): JSX.Element {\n        \n        if (gameState === 1) {\n            return (\n                <div>Game has Started!</div>\n            )\n        }\n        if (gameState === 2) {\n            return(\n                <><div>Player has Drawn: {pokemon1.name}</div><br /><div>CPU had Drawn: {pokemon2.name}</div></>\n            )\n        }\n        if (gameState === 3) {\n            return(\n                <div className=\"loading\">{pokemon1.name} attacked {pokemon2.name} for {pokemon1.attack} HP!</div>\n            )\n        }\n        if (gameState === 4) {\n            return(\n                <div>{pokemon2.name} attacked {pokemon1.name} for {pokemon2.attack} HP!</div>\n            )\n        }\n        if (gameState === 5) {\n            return(\n                <><div>{pokemon2.name} attacked {pokemon1.name} for {pokemon2.attack} HP!</div><div>CPU Wins!</div></>\n            )\n        }\n        if (gameState === 6) {\n            return(\n                <><div>{pokemon1.name} attacked {pokemon2.name} for {pokemon1.attack} HP!</div><div>Player Wins!</div></>\n            )\n        }\n        if (gameState === 7) {\n            return(\n                <div className=\"loading\">{pokemon1.name} is defending</div>\n            )\n        }\n        if (gameState === 8) {\n            return(\n                <><div>{pokemon1.name} with a {criticalChance}% to dodge and counter attack.</div><br />\n                <div>{pokemon1.name} could not dogde attack!</div>\n                <div>{pokemon2.name} attacked {pokemon1.name} for {(pokemon2.attack - pokemon1.defense)} HP!</div></>\n            )\n        }\n        if (gameState === 9) {\n            return(\n                <div>Player has decided to flee! CPU wins!</div>\n            )\n        }\n        if (gameState === 10) {\n            return(\n                <><div className=\"loading\">{pokemon1.name} with a {criticalChance}% to dodge and counter attack</div><br />\n                <div>{pokemon1.name} dodged {pokemon2.name}'s attack!</div></>\n            )\n        }\n        if (gameState === 11) {\n            return(\n                <><div>{pokemon1.name} with a {criticalChance}% to counter attack.</div><br />\n                <div>{pokemon1.name} counter-attacked with critical hit of {(pokemon1.attack + 10)} damage!</div>\n                <div>{pokemon2.name} lost {(pokemon1.attack + 10)} HP!</div></>\n            )\n        }\n    \n    return <div>\n        {/* <div>{pokemon2.name} Health: {pokemon2Health}</div> */}\n    </div>\n}\n","import { Pokemon } from \"../interfaces/pokemon\";\nimport { getMissPercent } from \"../utilities/data\";\nimport { getMissValue } from \"../utilities/data\";\n\n\nexport function BattleControls({ pokemon1, pokemon2, pokemon1Health, pokemon2Health, gameSetter, criticalSetter }:\n    { pokemon1: Pokemon, pokemon2: Pokemon,\n      pokemon1Health: (h: number) => void, pokemon2Health: (h: number) => void,\n      gameSetter: (g: number) => void, criticalSetter: (c: number) => void }): JSX.Element {\n\n        function cpuAttack() {\n            if (pokemon1.health > pokemon2.attack){\n                pokemon1.health = pokemon1.health - pokemon2.attack;\n            }\n            else {\n                pokemon1.health = 0;\n            }\n            pokemon1Health(pokemon1.health);\n            gameSetter(4);\n            return pokemon1Health;\n        }\n\n        function playerAttack() {\n            if (pokemon2.health > pokemon1.attack){\n                pokemon2.health = pokemon2.health - pokemon1.attack;\n            }\n            else {\n                pokemon2.health = 0;\n            }\n            pokemon2Health(pokemon2.health);\n            gameSetter(3);\n            return pokemon2Health;\n        }\n\n        function criticalPlayerAttack() {\n            if (pokemon2.health > (pokemon1.attack + 10)){\n                pokemon2.health = pokemon2.health - (pokemon1.attack + 10);\n            }\n            else {\n                pokemon2.health = 0;\n            }\n            pokemon2Health(pokemon2.health);\n            gameSetter(11);\n            return pokemon2Health;\n        }\n\n        function checkWinner() {\n            if (pokemon1.health === 0) {\n                gameSetter(5);\n                return true;\n            }\n            if (pokemon2.health === 0) {\n                gameSetter(6);\n                return true;\n            }\n            return false;\n        }\n\n        function attackHandler() {\n            if(checkWinner()){\n                return 0;\n            }\n            playerAttack();\n            if(checkWinner()){\n                return 0;\n            }\n            setTimeout(cpuAttack, 2000);\n            if(checkWinner()){\n                return 0;\n            }\n            checkWinner();\n        }\n\n        function playerDefendPrompt() {\n            gameSetter(7);\n        }\n\n        function checkMiss() {\n            const percent = getMissPercent(pokemon1.defense);\n            criticalSetter(percent);\n            return getMissValue(percent, pokemon1.defense);\n        }\n\n        function playerDefend() {\n            const isMiss = checkMiss();\n            if (isMiss) {\n                gameSetter(10);\n                setTimeout(criticalPlayerAttack, 3000);\n            }\n            else if (!isMiss){\n                if ((pokemon1.health + pokemon1.defense) > pokemon2.attack){\n                    pokemon1.health = (pokemon1.health + pokemon1.defense) - pokemon2.attack;\n                }\n                else {\n                    pokemon1.health = 0;\n                }\n                pokemon1Health(pokemon1.health);\n                gameSetter(8);\n            }\n            return pokemon1Health;\n        }\n\n        function defenseHandler() {\n            if(checkWinner()){\n                return 0;\n            }\n            playerDefendPrompt();\n            if(checkWinner()){\n                return 0;\n            }\n            setTimeout(playerDefend, 2000);\n            if(checkWinner()){\n                return 0;\n            }\n            checkWinner();\n        }\n\n        // function resetGame() {\n        //     gameSetter(1);\n        //     pokemon1Health(100);\n        //     pokemon2Health(100);\n        //     checkWinner();\n        // }\n\n        // function playAgain() {\n        //    <button onClick={resetGame}>Play Again?</button>\n        // }\n\n        // if (!checkWinner()) {\n        //     <><button onClick={attackHandler}>Attack</button><br /><br />\n        //     <button onClick={defenseHandler}>Defend</button><br /><br /></>    \n        // }\n        \n\n    return <div>\n        <button onClick={attackHandler}>Attack</button><br /><br />\n        <button onClick={defenseHandler}>Defend</button><br /><br />\n    </div>\n}\n    ","import React, { useState } from 'react';\nimport logo from './assets/PokemonImages/logo.png';\nimport './App.css';\nimport DECK from './assets/pokemons.json';\nimport { Pokemon } from './interfaces/pokemon';\nimport { CardViewer } from './components/PokemonView';\nimport { Controls } from './components/Controls';\nimport { BattleLogger } from './components/BattleLog';\nimport { BattleControls } from './components/BattleControls';\n\nfunction App(this: any): JSX.Element {\n  const [activeCard, setActiveCard] = useState<Pokemon>(DECK[0] as Pokemon);\n  const [oppActiveCard, oppSetActiveCard] = useState<Pokemon>(DECK[0] as Pokemon);\n  const [playerHealth, setPlayerHealth] = useState<number>(DECK[0].health as number);\n  const [oppHealth, setOppHealth] = useState<number>(DECK[0].health as number);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [gameState, setGameState] = useState<number>(0);\n  const [criticalState, setCriticalState] = useState<number>(0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"cell cell-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      {/* Player Hand */}\n      <aside className=\"cell cell-left\">\n        { !visible && <Controls \n        setPokemon= {setActiveCard}\n        oppSetPokemon = {oppSetActiveCard}\n        healthSetter = {setPlayerHealth}\n        oppHealthSetter = {setOppHealth}\n        deck = {DECK} \n        pokemon = {activeCard}\n        gameStateSetter = {setGameState}></Controls>}\n\n        <CardViewer pokemon={activeCard}\n        pokemonHealth = {playerHealth}></CardViewer>\n      </aside>\n\n      <main className=\"cell cell-main\">\n        { !visible && <button onClick={() => setVisible(!visible) }>Start Game</button>}\n        { visible && <BattleControls\n        pokemon1={activeCard}\n        pokemon2={oppActiveCard}\n        pokemon1Health={setPlayerHealth}\n        pokemon2Health={setOppHealth}\n        gameSetter = {setGameState}\n        criticalSetter={setCriticalState}></BattleControls> }\n      </main>\n\n      {/* CPU Hand */}\n      <aside className=\"cell cell-right\">\n        <CardViewer \n        pokemon={oppActiveCard}\n        pokemonHealth = {oppHealth}></CardViewer>\n      </aside>\n      <footer className=\"class cell-footer\">\n        <BattleLogger \n        pokemon1={activeCard}\n        pokemon2={oppActiveCard}\n        pokemon2Health={oppHealth}\n        gameState = {gameState}\n        criticalChance = {criticalState}></BattleLogger>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}